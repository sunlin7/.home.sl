# -*- mode: shell-script -*-
# shell functions

## the follow clip maybe useful when get a new environment.
# case $- in
#     *c*) return # it's run for command, just return
#        ;;
#     *) ;;       # run as interactive shell
# esac
# env -i PWD=$PWD LOGNAME=$LOGNAME USER=$USER LANG=$LANG HOME=$HOME SHELL=$SHELL TERM=$TERM MAIL=$MAIL /bin/bash -l -i -v -c "eval $*"

# setting MYCD_PROJECT_INDICATOR, MYCD_PROJECT_CDPATH in .bashrc for similar projects in difference dicrectory.
# Project indicator is an array as (sub01 sub02 ...)
MYCD_DEFAULT_HOME=~
MYCD_DEFAULT_CDPATH=$HOME:$file_dir
MYCD_DEFAULT_PROJECT_ROOT=
MYCD_PROJECT_INDICATOR= # (inc src)
MYCD_PROJECT_CDPATH= # (inc src)

function find_project_indicator() {
    [ ! -d "$1" ] && return 0

    builtin cd "$1"
    if [ $? -eq 0 ]; then
        shift
        not_exist=
        for i in "$@"; do
            [ ! -e "$i" ] && not_exist=1
        done

        if [ $not_exist ]; then
            parent=$(dirname "$(pwd)")
            [ "$parent" != "/" ] && find_project_indicator "$parent" "$@"
            return $?
        else
            echo "$(pwd)"
            return 0
        fi
    fi
    return 1
}

function _modify_cd_path_with_prj() {
    MYCD_PROJECT_ROOT="$1"
    NEW_PROJ_CDPATH=.
    for i in "${MYCD_PROJECT_CDPATH[@]}"; do
        NEW_PROJ_CDPATH=$NEW_PROJ_CDPATH:"${MYCD_PROJECT_ROOT}/$i"
    done
    CDPATH=$NEW_PROJ_CDPATH:$MYCD_DEFAULT_CDPATH
    export CDPATH MYCD_PROJECT_ROOT
}

function mycd_builtin() {
    if [ -n "$MYCD_PROJECT_INDICATOR" ]; then
        return builtin cd "$@"
    fi
    if [ $# -eq 0 ]; then
        builtin cd "$MYCD_DEFAULT_HOME"
        return $?
    elif [[ "." == "$1" ]]; then
        shift
        builtin cd "$MYCD_PROJECT_ROOT" "$@"
        return $?
    else
        if builtin cd "$@"; then
            NEW_PRJ_ROOT=$(find_project_indicator "$(pwd)" "${MYCD_PROJECT_INDICATOR[@]}")
            if [ -n "$NEW_PRJ_ROOT" ] && [[ "$NEW_PRJ_ROOT" != "$MYCD_PROJECT_ROOT" ]]; then
                _modify_cd_path_with_prj "$NEW_PRJ_ROOT"
            fi
        fi
    fi
}

pa () {
    if [ $# -eq 0 ]; then
        ps aux
    else
        exp=
        for i in "$@"; do
            # here we append a blank at tail, so the first char of exp will no be blank.
            exp="${exp}-e \"$i\" "
            eval "ps aux | grep $exp | grep -v grep"
        done
    fi
}

export EDITOR="emacsclient --alternate-editor=" # use exists term
[[ -z "$INSIDE_EMACS" ]] && export EDITOR="$EDITOR -t" # NOT inside Emacs, prefer current term

[[ -n "$SSH_CLIENT" ]] && [[ -z "$DISPLAY" ]] && export DISPLAY=${SSH_CLIENT/ */:0}
[[ -n "$SSH_CLIENT" ]] && [[ -z "$PULSE_SERVER" ]] && export PULSE_SERVER=tcp:${SSH_CLIENT/ */}
[[ -z "$HOSTALIASES" ]] && export HOSTALIASES=$HOME/.local/etc/hosts
[[ -d "$HOME/.root/bin" ]] && export PATH="$HOME/.root/bin:$PATH"
[[ -d "$HOME/.bin" ]]      && export PATH="$HOME/.bin:$PATH"
export LIBGL_ALWAYS_INDIRECT=1
export LS_COLORS="di=01;34:${LS_COLORS/:di=/:*.x=}" # dir color (blue) is hard to see

# some aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'
alias cd=mycd_builtin
alias cd.='cd ..'
alias cd..='cd ../..'
alias cd...='cd ../../..'
alias cd....='cd ../../../..'
alias cd-='cd -'
function rm() {
    for cmd in trash-put "gio trash" gvfs-trash /bin/rm /usr/bin/rm; do
        if command -v ${cmd/ */} > /dev/null; then
            $cmd "$@" 2>/dev/null && break
        fi
    done
}

function o() {
    for cmd in "gio open" explorer xdg-open gvfs-open gnome-open; do
        if command -v ${cmd/ */} > /dev/null; then
            [[ -n "$1" ]] && builtin cd "$(dirname $1)" && $cmd "$(basename $1)"
            break
        fi
    done
}
