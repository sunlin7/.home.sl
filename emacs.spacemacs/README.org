#+TITLE: My emacs configuration
#+INCLUDE: ~/.emacs.save/org/common_header.org

This is my .emacs configure for emacs25 on Ubuntu 18.04.
It depends on the Spacemacs.

** My configurations
To make the emacs portable, we get the root-dir and home-dir from load file
#+begin_src emacs-lisp
(defvar portable-root-dir
  (expand-file-name ".." invocation-directory))
(defvar portable-home-dir
  (file-name-directory (or load-file-name (buffer-file-name))))
#+end_src
Sometimes I want remove all the confgiure files but the saved files,
so set save-file directory out of .emacs.d directory.
#+BEGIN_SRC emacs-lisp
(defvar sl-savefile-dir (expand-file-name ".emacs.save/" portable-home-dir))
#+END_SRC

Define the configuration directory, and load it.
#+BEGIN_SRC emacs-lisp
(defvar sl-init-file (expand-file-name ".home.sl/emacs.spacemacs/init.el" portable-home-dir))
(when (file-exists-p sl-init-file)
  (load-file sl-init-file))
#+END_SRC
After that, we can install the packages from elpa, just run follow function by press <kbd>Alt+x<kbd>
#+begin_src emacs-lisp :tangle yes
sl-package-install-all
#+end_src
*** emacs with msys64
Follow elisp will make the emacs with msys64 work better.
#+BEGIN_SRC elisp
  ;; set path before load libraries
  (autoload 'string-join "subr-x")
  (when (string= system-type "windows-nt")
    (let ((msys-path (cond ((string-match "x86_64" system-configuration) "D:/msys64/")
                           (t "D:/msys/"))))
      (when (file-exists-p msys-path)
        (dolist (item '("mingw64/bin" "mingw32/bin" "usr/bin"))
          (add-to-list 'exec-path (concat msys-path item)))
        (setenv "PATH" (replace-regexp-in-string "/" "\\\\" (string-join exec-path path-separator)))
        (setenv "PYTHONPATH" (concat msys-path "usr/lib/python2.7/site-packages/"))
        (let ((cygwin-mount-el "~/.emacs.save/cygwin-mount.el"))
          (load-file "~/.emacs.save/cygwin-mount.el")
          (cygwin-mount-activate)))))
#+END_SRC

** Integrate with spacemacs
Config the spacemacs with follow layers in =.spacemacs=
#+BEGIN_SRC emacs-lisp
  (defun dotspacemacs/layers ()
    "Layer configuration:
  This function should only modify configuration layer settings."
    '(systemd
      csv
      dap
      rust
      django
      graphviz
      gtags
      lsp
      ;; lua
      (lua :variables
           lua-backend 'lsp-emmy
           lua-lsp-emmy-jar-path (expand-file-name "share/EmmyLua-LS-all.jar" portable-root-dir)
           lua-lsp-emmy-enable-file-watchers nil
           lua-indent-offset 4)
      (plantuml :variables
                plantuml-jar-path (expand-file-name "~/.root/share/plantuml.jar")
                org-plantuml-jar-path (expand-file-name "~/.root/share/plantuml.jar"))
      syntax-checking
      (chinese :variables chinese-default-input-method 'wubi)
      (javascript :variables tern-command '("tern"))
      typescript
      vimscript
      windows-scripts
      html
      php
      (sql :variables
           sql-capitalize-keywords t
           sql-capitalize-keywords-blacklist '("name" "varchar"))
      ;; ----------------------------------------------------------------
      ;; Example of useful layers you may want to use right away.
      ;; Uncomment some layer names and press `SPC f e R' (Vim style) or
      ;; `M-m f e R' (Emacs style) to install them.
      ;; ----------------------------------------------------------------
      auto-completion
      better-defaults
      emacs-lisp
      git
      helm
      ;; ivy
      markdown
      multiple-cursors
      org
      ;; (shell :variables
      ;;        shell-default-height 30
      ;;        shell-default-position 'bottom)
      ;; spell-checking
      ;; syntax-checking
      treemacs
      version-control
      smex
      (semantic :disabled-for emacs-lisp) ; company-backend for elisp has problem with semantic
      python
      (c-c++ :variables
             c-c++-enable-google-style t
             c-c++-enable-google-newline t
             ;; c-c++-enable-clang-support t
             c-c++-backend 'lsp-clangd
             )
      ibuffer
      imenu-list
      yaml
      octave
      (xclipboard :variables xclipboard-enable-cliphist t)
      ietf
      )
    )
#+END_SRC

And set the additional packages in =.spacemacs=,
#+begin_src elisp
 dotspacemacs-additional-packages sl-packages-list
#+end_src

Try to ignore follow packages:
#+begin_src emacs-lisp
  dotspacemacs-excluded-packages '(ccls
                                   rtags
                                   company-rtags
                                   company-ycmd
                                   flycheck-rtags
                                   helm-rtags)
#+end_src
Then try load the spacemacs and its settings.
#+BEGIN_SRC emacs-lisp
  ;; assume the spacemaces was installed.
  (setq spacemacs-start-directory (expand-file-name ".emacs.spacemacs/" portable-home-dir))
  (defvar sl-spacemacs-init (expand-file-name "init.el" spacemacs-start-directory))
  (when (file-exists-p sl-spacemacs-init)
    ;; (custom-set-variables '(magit-git-executable "~/.root/git-2.0.4/bin/git"))
    (let ((magit-exec (expand-file-name "bin/git" portable-root-dir)))
      (when (file-exists-p magit-exec)
        (setq-default magit-git-executable magit-exec)))
    (let ((gtags-el (expand-file-name "share/gtags/gtags.el" portable-root-dir)))
      (when (file-exists-p gtags-el)
        (load-file gtags-el)))
    (setq sl-packages-list
          (append sl-packages-list '(flycheck-popup-tip)))
    (let ((dotspath (expand-file-name ".spacemacs" portable-home-dir)))
      (when (file-exists-p dotspath)
        (defvar dotspacemacs-filepath dotspath)))
    ;; load the spacemacs
    (load-file sl-spacemacs-init)
    ;; post-config for prelude
    (menu-bar-mode t)
    (eval-after-load 'projectile          ; map the "G" for shortcut "s g"
      #'(define-key projectile-command-map (kbd "G") #'projectile-grep))
    (when (not (file-exists-p plantuml-jar-path)) ; download plantuml automatically
      (plantuml-download-jar))
    (custom-set-variables '(plantuml-default-exec-mode 'jar)) ; prefer local 'jar than 'server
    ;; (eval-after-load 'plantuml-mode #'(plantuml-set-output-type "png")) ; default svg request libsvg, change to PNG.

    ;; fix the c-basic-offset for google-c-style
    (eval-after-load 'google-c-style
      (dolist (v google-c-style)
        (when (and (listp v) (eq (car v) 'c-basic-offset)) 
          (setcdr v 4))))
    ;; tab-width corresponed to the c-basic-offset
    (add-hook 'c-mode-common-hook
              (lambda ()
                (setq-local tab-width c-basic-offset)))
    ;; check the the checkers
    (when (not (executable-find "gcc"))
      (custom-set-variables '(flycheck-disabled-checkers '(c/c++-gcc))))
    (when (not (executable-find "clang"))
      (custom-set-variables '(flycheck-disabled-checkers '(c/c++-clang)))))
#+END_SRC

And the project settings:
#+begin_src emacs-lisp
  (defvar my-project-init (expand-file-name "projects.el" sl-savefile-dir))
  (when (file-exists-p my-project-init)
    (add-hook 'after-init-hook (lambda () (load-file my-project-init)))
    (defun sl-ede-project-reload ()
      (interactive)
      (setq ede-cpp-root-project-list nil)
      (load-file my-project-init)))
#+end_src

Some misc settings.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(max-lisp-eval-depth 100000)
   '(max-specpdl-size    100000)
   '(dired-listing-switches "-alt"))
  (put 'downcase-region 'disabled nil)

  (eval-after-load 'dired-x
    '(when (boundp 'dired-omit-extensions)
       (delete ".bin" dired-omit-extensions)))
  (add-to-list 'auto-coding-alist '("\\.log" . dos))
  (when (daemonp)
    (add-hook 'after-init-hook (lambda () (cd "~"))))

  (add-hook 'after-change-major-mode-hook
            '(lambda () (when (eq major-mode 'js-mode)
                          (setq-local whitespace-line-column 120))))
#+END_SRC

** Addtional Requirest
If need support python =live-py-mode=, it request the =thinter= package, can install by 
#+begin_src shell
apt-get install python36-tkinter
#+end_src

