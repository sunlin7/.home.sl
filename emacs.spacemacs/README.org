#+TITLE: My emacs configuration
#+INCLUDE: ~/.emacs.save/org/common_header.org

This is my .emacs configure for emacs25 on Ubuntu 18.04.
It depends on the Spacemacs.

** My configurations
To make the emacs portable, we get the root-dir and home-dir from load file
#+begin_src emacs-lisp
  (defvar portable-root-dir (expand-file-name ".." invocation-directory))
  (defvar portable-home-dir (file-name-directory (or load-file-name (buffer-file-name))))
#+end_src
Sometimes I want remove all the confgiure files but the saved files,
so set save-file directory out of .emacs.d directory.
#+BEGIN_SRC emacs-lisp
  (defvar sl-savefile-dir (expand-file-name ".emacs.save/" portable-home-dir))
#+END_SRC

Define the configuration directory, and load it.
#+BEGIN_SRC emacs-lisp
  (defvar sl-init-file (expand-file-name ".home.sl/emacs.spacemacs/init.el" portable-home-dir))
  (when (file-exists-p sl-init-file) (load-file sl-init-file))
#+END_SRC
After that, we can install the packages from elpa, just run follow function by press <kbd>Alt+x<kbd>
#+begin_src emacs-lisp :tangle yes
sl-package-install-all
#+end_src
*** emacs with msys64
Starting emacs-x86_64-mingw64 directly maybe got the PATH without mingw32/64; follow cmds will help to get correct PATH.
#+begin_src shell
  # starting emacs daemon
  c:\msys64\mingw64.exe bash -lc "runemacs --daemon"
  # starting emacs daemon and kill the frame
  c:\msys64\mingw64.exe bash -lc "emacsclientw --alternate-editor= -t --eval '(delete-frame nil 1)'"
  # for starting a client that daemon maybe not exist
  c:\msys64\mingw64.exe bash -lc "emacsclientw -nc --alternate-editor="
  # for just starting a emacsclient
  c:\msys64\mingw64\bin\emacsclient -c
#+end_src

** Integrate with Spacemacs
Config the spacemacs with follow layers in =.spacemacs=
#+BEGIN_SRC emacs-lisp
  dotspacemacs-configuration-layers sl-configuration-layers
  dotspacemacs-additional-packages sl-packages-list
  dotspacemacs-excluded-packages sl-packages-excluded
  ;; ...
  dotspacemacs-mode-line-theme 'vanilla
#+end_src
Then try load the spacemacs and its settings.
#+BEGIN_SRC emacs-lisp
  ;; assume the spacemaces was installed.
  (setq spacemacs-start-directory (expand-file-name ".emacs.spacemacs/" portable-home-dir))
  (defvar sl-spacemacs-init (expand-file-name "init.el" spacemacs-start-directory))
  (when (file-exists-p sl-spacemacs-init)
    (let ((magit-exec (expand-file-name "bin/git" portable-root-dir)))
      (when (file-exists-p magit-exec) (setq-default magit-git-executable magit-exec)))
    (let ((gtags-el (expand-file-name "share/gtags/gtags.el" portable-root-dir)))
      (when (file-exists-p gtags-el) (load-file gtags-el)))

    (setq sl-packages-list (append sl-packages-list
                                   '(flycheck-popup-tip)))
    (setq sl-packages-excluded '(ccls
                                 rtags
                                 company-rtags
                                 company-ycmd
                                 flycheck-rtags
                                 helm-rtags
                                 pdf-tools
                                 org-pdftools
                                 tide
                                 yasnippet
                                 yasnippet-snippets))
    (setq sl-configuration-layers
          '(auto-completion
            better-defaults
            (c-c++ :variables
                   c-c++-enable-google-style t
                   c-c++-enable-google-newline t
                   ;; c-c++-enable-clang-support t
                   c-c++-backend 'lsp-clangd)
            emacs-lisp
            git
            gtags
            helm
            html
            ibuffer
            imenu-list
            lsp
            ;; lua
            (lua :variables
                 lua-backend 'lsp-emmy
                 lua-lsp-emmy-jar-path (expand-file-name "share/EmmyLua-LS-all.jar" portable-root-dir)
                 lua-lsp-emmy-enable-file-watchers nil
                 lua-indent-offset 4)
            markdown
            multiple-cursors
            smex
            (sql :variables
                 sql-capitalize-keywords t
                 sql-capitalize-keywords-blacklist '("name" "varchar"))
            ;; ivy
            (semantic :disabled-for emacs-lisp) ; company-backend for elisp has problem with semantic
            python
            (xclipboard :variables xclipboard-enable-cliphist t)
            yaml
            version-control
            vimscript))

    (when sl-x11-support
      (setq sl-packages-list (append sl-packages-list
                                     '(nov pdf-tools org-pdftools)))
      (dolist (elm '(tide
                     org-pdftools
                     pdf-tools
                     yasnippet
                     yasnippet-snippets))
        (delete elm sl-packages-excluded))
      (setq sl-configuration-layers
            (append sl-configuration-layers
                    '(csv
                      (chinese :variables chinese-default-input-method 'wubi)
                      dap
                      django
                      graphviz
                      gtags
                      ietf
                      (javascript :variables tern-command '("tern"))
                      org
                      octave
                      (plantuml :variables
                                plantuml-jar-path (expand-file-name "~/.root/share/plantuml.jar")
                                org-plantuml-jar-path (expand-file-name "~/.root/share/plantuml.jar"))
                      php
                      rust
                      syntax-checking
                      systemd
                      treemacs
                      typescript
                      windows-scripts))))

    (let ((dotspath (expand-file-name ".spacemacs" portable-home-dir)))
      (when (file-exists-p dotspath) (defvar dotspacemacs-filepath dotspath)))
    ;; load the spacemacs
    (load-file sl-spacemacs-init)
    (setq dotspacemacs-frame-title-format "%b@%S")
    ;; post-config for spacemacs
    (menu-bar-mode t)
    (when sl-x11-support
      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
      (pdf-loader-install)
      (eval-after-load 'pdf-tools
        #'(push 'pdf-view-midnight-minor-mode pdf-tools-enabled-modes))
      (use-package org-pdftools
        :hook (org-load . org-pdftools-setup-link)))

    ;; (when (not (file-exists-p plantuml-jar-path)) ; download plantuml automatically
    ;;  (plantuml-download-jar))
    ;; (eval-after-load 'plantuml-mode #'(plantuml-set-output-type "png"))
    (custom-set-variables '(plantuml-default-exec-mode 'jar))

    ;;;; fix the c-basic-offset for google-c-style
    ;; (eval-after-load 'google-c-style
    ;;   (dolist (v google-c-style)
    ;;     (when (and (listp v) (eq (car v) 'c-basic-offset))
    ;;       (setcdr v 4))))
    ;; (add-hook 'c-mode-common-hook
    ;;           (lambda () (setq-local tab-width c-basic-offset)))
    ;; check the the checkers
    (when (not (executable-find "gcc"))
      (custom-set-variables '(flycheck-disabled-checkers '(c/c++-gcc))))
    (when (not (executable-find "clang"))
      (custom-set-variables '(flycheck-disabled-checkers '(c/c++-clang)))))
#+END_SRC

And the project settings:
#+begin_src emacs-lisp
  (defvar my-project-init (expand-file-name "projects.el" sl-savefile-dir))
  (when (file-exists-p my-project-init)
    (add-hook 'after-init-hook (lambda () (load-file my-project-init)))
    (defun sl-ede-project-reload ()
      (interactive)
      (setq ede-cpp-root-project-list nil)
      (load-file my-project-init)))
#+end_src

Some misc settings.
#+BEGIN_SRC emacs-lisp
  (xterm-mouse-mode 0)
  (custom-set-variables
   '(max-lisp-eval-depth 100000)
   '(max-specpdl-size    100000)
   '(dired-listing-switches "-alt"))
  (put 'downcase-region 'disabled nil)

  (eval-after-load 'dired-x
    '(when (boundp 'dired-omit-extensions)
       (delete ".bin" dired-omit-extensions)))
  (add-to-list 'auto-coding-alist '("\\.log" . dos))
  (add-to-list 'auto-mode-alist '("\\.mtl\\'" . xml-mode))

  (add-hook 'after-change-major-mode-hook
            '(lambda () (when (eq major-mode 'js-mode)
                          (setq-local whitespace-line-column 120))))

  (advice-add 'pyvenv-activate :around
              #'(lambda (ORIG directory)
                  (let ((sl-calling-pyvenv-activate t))
                    (funcall ORIG directory))))
  (advice-add 'pyvenv-deactivate :around
              #'(lambda (ORIG)
                  (if (and (boundp 'sl-calling-pyvenv-activate)
                           sl-calling-pyvenv-activate)
                      (ignore-errors (funcall ORIG))
                    (funcall ORIG))))

  (when (daemonp) (add-hook 'after-init-hook (lambda () (cd "~"))))

#+END_SRC

** Addtional Requirest
If need support python =live-py-mode=, it request the =thinter= package, can install by 
#+begin_src shell
apt-get install python36-tkinter
#+end_src

** Ctrl+Alt_R+X not working for mintty (xterm)
   Report to [[https://github.com/mintty/mintty/issues/1034][mintty#1034 CTRL + ALT_R + F combination does not work]], workaround is following
   [[https://github.com/mintty/mintty/issues/1034#issuecomment-693930315][mintty1034#issuecomment-693930315]] to map ALT_R to ALT_L.
#+begin_src text :tangle "map-alt_r-to-alt_l.reg"
  Windows Registry Editor Version 5.00

  [HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout]
  "Scancode Map"=hex:00,00,00,00,00,00,00,00,02,00,00,00,38,00,38,e0,00,00,00,00
#+end_src

** Shortcuts from Windows to Remote
   *shortcut for remote host:*
   \cygwin64\bin\cygstart.exe --hide /usr/bin/ssh.exe -XCnf dev "/bin/bash -lc '~/.root/bin/emacsclient\ -c\ -n\ --alternate-editor='"
   *shortcut for WSL:*
   wsl.exe -u sunlin7 -e /bin/bash -lc "~/.root/bin/emacsclient -c -n --alternate-editor="
    

